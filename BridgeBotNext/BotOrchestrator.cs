using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using BridgeBotNext.Configuration;
using BridgeBotNext.Entities;
using BridgeBotNext.Providers;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;

namespace BridgeBotNext
{
    public class BotOrchestrator
    {
        private static readonly char[] CommandArgsSplitters = {' ', '_'};
        private static readonly string BotPrefix = "üîπ ";
        private static readonly string CurrentChatPrefix = "üìç";
        private readonly IOptions<AuthConfiguration> _authConfiguration;
        private readonly ILogger<BotOrchestrator> _logger;
        private readonly List<Provider> _providers = new List<Provider>();

        private readonly BotDbContext _db;

        public BotOrchestrator(ILogger<BotOrchestrator> logger, BotDbContext db,
            IOptions<AuthConfiguration> authConfiguration)
        {
            _logger = logger;
            _db = db;
            _authConfiguration = authConfiguration;

            if (_authConfiguration.Value == null ||
                _authConfiguration.Value.Enabled && String.IsNullOrEmpty(_authConfiguration.Value.Password))
            {
                throw new Exception(
                    "Incorrect Auth settings. Auth is not configured or auth is enabled, but password is empty");
            }
        }

        public void AddProvider(Provider provider)
        {
            _providers.Add(provider);
            provider.MessageReceived += OnMessageReceived;
            provider.CommandReceived += OnCommandReceived;
        }

        public void RemoveProvider(Provider provider)
        {
            if (_providers.Remove(provider))
            {
                provider.MessageReceived -= OnMessageReceived;
                provider.CommandReceived -= OnCommandReceived;
            }
        }

        private async void OnCommandReceived(object sender, Provider.MessageEventArgs e)
        {
            var conversation = e.Message.OriginConversation;

            var messageBody = e.Message.Body;
            _logger.LogTrace(
                $"Command received from {conversation.Provider.DisplayName}, conversationId: {conversation.OriginId}");

            try
            {
                string command = messageBody.Trim();
                string args = null;
                var splitterIdx = messageBody.IndexOfAny(CommandArgsSplitters);
                if (splitterIdx != -1)
                {
                    command = messageBody.Substring(0, splitterIdx).Trim();
                    args = messageBody.Substring(splitterIdx + 1).Trim();
                }

                if (command == "/auth")
                    await OnAuthCommand(e, command, args);
                else if (command == "/start")
                    await OnStartCommand(e, command, args);
                else if (command == "/connect") // allow everybody to use connection token (make setup process easier)
                    await OnConnectCommand(e, command, args);
                else if (command == "/deauth" && await _ensureHasAdminRights(e))
                    await OnDeauthCommand(e, command, args);
                else if (command == "/token" && await _ensureHasAdminRights(e))
                    await OnTokenCommand(e, command, args);
                else if (command == "/list"
                ) // allow everybody to use list command (everybody have rights to see where messages are resending)
                    await OnListCommand(e, command, args);
                else if (command == "/disconnect" && await _ensureHasAdminRights(e))
                    await OnDisconnectCommand(e, command, args);
                else
                {
                    _logger.LogTrace(
                        $"Unknown command: {command}");
                }
            }
            catch (Exception ex)
            {
                var errorId = Utils.GenerateCryptoRandomString(10);
                await conversation.SendMessage(
                    $"{BotPrefix}–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏–∑-–∑–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ—à–∏–±–∫–∏.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ —Ç–∏–∫–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–æ–µ–∫—Ç–∞ (https://github.com/maksimkurb/BridgeBotNext) –∏ –ª–æ–≥-—Ñ–∞–π–ª.\n–ù–æ–º–µ—Ä –æ—à–∏–±–∫–∏, –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ª–æ–≥–∞—Ö: {errorId}");
                _logger.LogError(ex, $"Failed to process command: \"{messageBody}\" [errorId={errorId}]");
            }
        }

        private Conversation _findOrInsertConversation(Conversation conversation)
        {
            var dbConversation = _db.Conversations.Find(conversation.ConversationId);
            if (dbConversation == null)
            {
                dbConversation = conversation;
                _db.Conversations.Add(dbConversation);
                _db.SaveChanges();
            }
            else if (dbConversation.Title != conversation.Title)
            {
                _db.Conversations.Update(conversation);
                _db.SaveChanges();
            }

            return dbConversation;
        }

        private Person _findPerson(ProviderId providerId)
        {
            return _db.Persons.Find(providerId);
        }

        private async Task<bool> _ensureHasAdminRights(Provider.MessageEventArgs e)
        {
            if (!_authConfiguration.Value.Enabled) return true;

            if (e.Message.OriginSender.IsAdmin)
            {
                return true;
            }

            var person = _findPerson(e.Message.OriginSender.PersonId);
            if (person != null && person.IsAdmin)
            {
                return true;
            }

            _logger.LogTrace(
                $"Command execution access denied for {e.Message.OriginSender.ProfileUrl}");
            await e.Message.OriginConversation.SendMessage(
                $"{BotPrefix}–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /auth <–ø–∞—Ä–æ–ª—å –±–æ—Ç–∞> (–Ω–∞–ø–∏—Å–∞—Ç—å –º–æ–∂–Ω–æ –≤ –õ–°, —è –∑–∞–ø–æ–º–Ω—é)");

            return false;
        }


        private async Task OnStartCommand(Provider.MessageEventArgs e, string command, string args)
        {
            await e.Message.OriginConversation.SendMessage(
                $@"{BotPrefix}–ü—Ä–∏–≤–µ—Ç! –Ø BridgeBotNext!
–Ø –ø–æ–º–æ–≥—É –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –±–µ—Å–µ–¥—ã –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–æ–≤, –ø—É—Ç—ë–º –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ–¥–Ω–æ–≥–æ –≤ –¥—Ä—É–≥–æ–π –∏ –æ–±—Ä–∞—Ç–Ω–æ.
1) –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –±–æ—Ç–∞ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è–º –≤ –±–µ—Å–µ–¥–µ.
2) –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /token –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —á–∞—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –¥—Ä—É–≥–∏–º —á–∞—Ç–æ–º.
3) –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ –¥—Ä—É–≥–æ–π –±–µ—Å–µ–¥–µ, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —ç—Ç–æ—Ç –±–æ—Ç.
–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /list

/–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ_–º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã: {string.Join(", ", _providers.Select(p => p.DisplayName))}
/–í–µ—Ä—Å–∏—è_–±–æ—Ç–∞: {Program.Version}
/–°—Ç—Ä–∞–Ω–∏—Ü–∞_–ø—Ä–æ–µ–∫—Ç–∞: https://github.com/maksimkurb/BridgeBotNext
/–ê–≤—Ç–æ—Ä: <Maxim Kurbatov> max@cubly.ru, 2018-2019");
        }

        private async Task OnDisconnectCommand(Provider.MessageEventArgs e, string command, string args)
        {
            var conversation = e.Message.OriginConversation;

            if (string.IsNullOrEmpty(args))
            {
                await conversation.SendMessage(
                    $"{BotPrefix}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n/disconnect <connectionId>\n\n–ì–¥–µ <connectionId> - ID —Å–æ–ø—Ä—è–∂–µ–Ω–∏—è. –£–∑–Ω–∞—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ, –≤–≤–µ–¥—è /list");
                return;
            }

            try
            {
                var connectionId = long.Parse(args);
                var connection = _db.Connections
                    .Include(c => c.LeftConversation)
                    .Include(c => c.RightConversation)
                    .SingleOrDefault(c => c.ConnectionId == connectionId);
                if (connection == null) throw new ArgumentException("Connection does not exists");

                if (!connection.LeftConversation.Equals(conversation) &&
                    !connection.RightConversation.Equals(conversation))
                    throw new ArgumentException("Connection does not valid for this chat");
                var otherConversation = connection.LeftConversation.Equals(conversation)
                    ? connection.RightConversation
                    : connection.LeftConversation;

                _db.Connections.Remove(connection);
                await _db.SaveChangesAsync();
                
                await Task.WhenAll(
                    conversation.SendMessage($"{BotPrefix}–ß–∞—Ç {otherConversation} –æ—Ç–∫–ª—é—á—ë–Ω"),
                    otherConversation.SendMessage($"{BotPrefix} –ß–∞—Ç {conversation} –æ—Ç–∫–ª—é—á—ë–Ω")
                );
            }
            catch (Exception ex) when (ex is ArgumentException || ex is FormatException)
            {
                await conversation.SendMessage($"{BotPrefix}–°–æ–ø—Ä—è–∂–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
            }
        }

        private async Task OnListCommand(Provider.MessageEventArgs e, string command, string args)
        {
            var conversation = _findOrInsertConversation(e.Message.OriginConversation);

            var connections = _db.Connections
                .Include(x => x.LeftConversation)
                .Include(x => x.RightConversation)
                .Where(x => x.LeftConversation.Equals(conversation) || x.RightConversation.Equals(conversation))
                .ToList();

            if (!connections.Any())
            {
                await conversation.SendMessage($"{BotPrefix}–ù–µ—Ç —Å–æ–ø—Ä—è–∂—ë–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞");
                return;
            }

            var sb = new StringBuilder();
            sb.AppendFormat("{0}–°–æ–ø—Ä—è–∂—ë–Ω–Ω—ã–µ —á–∞—Ç—ã:\n", BotPrefix);

            var i = 1;
            foreach (var connection in connections)
            {
                sb.AppendFormat("{0}. ", i++);

                if (connection.LeftConversation == conversation)
                    sb.Append(CurrentChatPrefix);
                if (connection.LeftConversation != null)
                    sb.Append(connection.LeftConversation);
                else
                    sb.Append("<NONE>");

                sb.Append(" <--> ");

                if (connection.RightConversation == conversation)
                    sb.Append(CurrentChatPrefix);
                if (connection.RightConversation != null)
                    sb.Append(connection.RightConversation);
                else
                    sb.Append("<NONE>");

                sb.AppendFormat(" /disconnect_{0}\n", connection.ConnectionId);
            }

            await conversation.SendMessage(sb.ToString());
        }

        private async Task OnTokenCommand(Provider.MessageEventArgs e, string command, string args)
        {
            var conversation = _findOrInsertConversation(e.Message.OriginConversation);

            var connection = new Connection();
            connection.LeftConversation = conversation;
            connection.Token = Utils.GenerateCryptoRandomString(20);
            _db.Connections.Add(connection);
            await _db.SaveChangesAsync();

            await conversation.SendMessage(
                $"{BotPrefix}–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–ø—Ä—è–∂–µ–Ω–∏—è —á–∞—Ç–æ–≤:\n/connect $mbb2${connection.Token}\n\n–í–≤–µ–¥–∏—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –¥—Ä—É–≥–æ–º —á–∞—Ç–µ, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –µ–≥–æ –∫ –¥–∞–Ω–Ω–æ–º—É —á–∞—Ç—É");
        }

        private async Task OnAuthCommand(Provider.MessageEventArgs e, string command, string args)
        {
            var conversation = e.Message.OriginConversation;
            if (!_authConfiguration.Value.Enabled)
            {
                await conversation.SendMessage($"{BotPrefix}–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è");
                return;
            }

            if (args.Equals(_authConfiguration.Value.Password))
            {
                var person = _findPerson(e.Message.OriginSender.PersonId);
                if (person != null && person.IsAdmin)
                {
                    await conversation.SendMessage($"{BotPrefix}–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º");
                    return;
                }

                person = e.Message.OriginSender;
                person.IsAdmin = true;
                _db.Persons.Add(person);
                await _db.SaveChangesAsync();
                
                await conversation.SendMessage(
                    $"{BotPrefix}–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {person.DisplayName} [{person.ProfileUrl}] —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä");
            }
            else
            {
                await conversation.SendMessage($"{BotPrefix}–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å");
            }
        }

        private async Task OnDeauthCommand(Provider.MessageEventArgs e, string command, string args)
        {
            var conversation = e.Message.OriginConversation;
            if (!_authConfiguration.Value.Enabled)
            {
                await conversation.SendMessage($"{BotPrefix}–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è");
                return;
            }

            var providerId = string.IsNullOrEmpty(args)
                ? e.Message.OriginSender.PersonId
                : new ProviderId(e.Message.OriginSender.Provider, args);
            var personToDemote = _findPerson(providerId);
            if (personToDemote != null)
            {
                _db.Persons.Remove(personToDemote);
                await _db.SaveChangesAsync();
                await conversation.SendMessage(
                    $"{BotPrefix}–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {personToDemote.DisplayName} [{e.Message.OriginSender.ProfileUrl}] –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä");
            }
            else
            {
                await conversation.SendMessage($"{BotPrefix}–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
            }
        }

        private async Task OnConnectCommand(Provider.MessageEventArgs e, string command, string args)
        {
            var conversation = _findOrInsertConversation(e.Message.OriginConversation);

            if (string.IsNullOrEmpty(args))
            {
                await conversation.SendMessage(
                    $"{BotPrefix}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n/connect <token>\n\n–ì–¥–µ <token> - –∫–ª—é—á –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –¥—Ä—É–≥–æ–º—É —á–∞—Ç—É. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–∞–∫–æ–π –∫–ª—é—á, –≤–≤–µ–¥–∏—Ç–µ /token");
                return;
            }

            var token = args.Trim();
            if (!token.StartsWith("$mbb2$"))
            {
                await conversation.SendMessage($"{BotPrefix}–ö–ª—é—á –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π (–≤–æ–∑–º–æ–∂–Ω–æ –≤ –Ω—ë–º –æ–ø–µ—á–∞—Ç–∫–∞?)");
                return;
            }

            token = token.Substring(6);

            var connection = _db.Connections.First(x => x.Token == token);
            
            if (connection == null)
            {
                await conversation.SendMessage($"{BotPrefix}–ö–ª—é—á –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
                return;
            }

            if (connection.RightConversation != null || connection.CreatedAt.AddHours(1) < DateTime.Now)
            {
                await conversation.SendMessage($"{BotPrefix}–ö–ª—é—á –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç–∞—Ä–µ–ª");
                return;
            }

            if (connection.LeftConversation.Equals(conversation))
            {
                await conversation.SendMessage(
                    $"{BotPrefix}–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å —á–∞—Ç –∫ —Å–∞–º–æ–º—É —Å–µ–±–µ.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –¥—Ä—É–≥–æ–º —á–∞—Ç–µ —Å —ç—Ç–∏–º –±–æ—Ç–æ–º");
                return;
            }

            var otherConnections = _db.Connections.Where(x =>
                x.LeftConversation.Equals(connection.LeftConversation) && x.RightConversation.Equals(conversation) ||
                x.LeftConversation.Equals(conversation) && x.RightConversation.Equals(connection.LeftConversation)
            ).ToList();

            if (otherConnections.Any())
            {
                await conversation.SendMessage($"{BotPrefix}–≠—Ç–∏ —á–∞—Ç—ã —É–∂–µ —Å–æ–ø—Ä—è–∂–µ–Ω—ã –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º");
                return;
            }

            try
            {
                await connection.LeftConversation.SendMessage(
                    $"{BotPrefix}–≠—Ç–æ—Ç —á–∞—Ç —Å–æ–ø—Ä—è–∂—ë–Ω —Å {conversation}\n/list - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–ø—Ä—è–∂–µ–Ω–∏–π");
            }
            catch (Exception ex)
            {
                await conversation.SendMessage(
                    $"{BotPrefix}–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —á–∞—Ç {connection.LeftConversation}: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤–æ–∑–º–æ–∂–Ω–æ –±–æ—Ç–∞ –≤—ã–≥–Ω–∞–ª–∏ –∏–∑ —Ç–æ–≥–æ —á–∞—Ç–∞?)");
                _logger.LogWarning(ex, "Could not send test message to conversation while connecting");
                return;
            }


            connection.RightConversation = conversation;
            _db.Connections.Update(connection);
            await _db.SaveChangesAsync();

            await conversation.SendMessage(
                $"{BotPrefix}–≠—Ç–æ—Ç —á–∞—Ç —Å–æ–ø—Ä—è–∂—ë–Ω —Å {connection.LeftConversation}\n/list - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–ø—Ä—è–∂–µ–Ω–∏–π");
        }

        private void OnMessageReceived(object sender, Provider.MessageEventArgs e)
        {
            var conversation = e.Message.OriginConversation;
            var provider = conversation.Provider;

            _logger.LogTrace(
                $"Message received from {provider.DisplayName}, conversationId: {conversation.OriginId}");

            var connections = _db.Connections
                .Include(x => x.LeftConversation)
                .Include(x => x.RightConversation)
                .Where(x => Equals(x.LeftConversation.ConversationId, conversation.ConversationId) ||
                           Equals(x.RightConversation.ConversationId, conversation.ConversationId))
                .ToList();

            Task.WhenAll(connections.Select(connection =>
            {
                if (connection.Direction == ConnectionDirection.None) return Task.CompletedTask;

                Conversation otherConversation = null;
                switch (connection.Direction)
                {
                    case ConnectionDirection.TwoWay:
                        otherConversation = Equals(connection.LeftConversation, conversation)
                            ? connection.RightConversation
                            : connection.LeftConversation;
                        break;
                    case ConnectionDirection.ToLeft when Equals(connection.RightConversation, conversation):
                        otherConversation = connection.LeftConversation;
                        break;
                    case ConnectionDirection.ToRight when Equals(connection.LeftConversation, conversation):
                    {
                        otherConversation = connection.RightConversation;
                        break;
                    }
                }

                if (otherConversation != null) return otherConversation.SendMessage(e.Message);

                return Task.CompletedTask;
            }));
        }
    }
}
